name: 🚀 RC Release Automation

on:
  repository_dispatch:
    types: [run-release]
  workflow_dispatch:
    inputs:
      prod_version:
        description: 'Production version (e.g., v1.2.3)'
        required: true
        default: 'v1.0.0'
      new_version:
        description: 'New release version (e.g., v1.3.0)'
        required: true
        default: 'v1.1.0'
      service_name:
        description: 'Service name (e.g., cer-cart)'
        required: true
        default: 'test-service'
      release_type:
        description: 'Release type'
        required: true
        default: 'standard'
        type: choice
        options:
          - standard
          - hotfix
          - ebf
      rc_name:
        description: 'Release Coordinator name'
        required: true
        default: 'Test RC'
      rc_manager:
        description: 'Release Manager name'
        required: true
        default: 'Test Manager'
      day1_date:
        description: 'Day 1 date (YYYY-MM-DD)'
        required: true
        default: '2024-01-15'
      day2_date:
        description: 'Day 2 date (YYYY-MM-DD)'
        required: true
        default: '2024-01-16'

jobs:
  generate-release-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🚀 Checkout repository
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🔧 Extract parameters
      id: params
      run: |
        # Extract from repository_dispatch or workflow_dispatch
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "source=slack" >> $GITHUB_OUTPUT
          echo "prod_version=${{ github.event.client_payload.prod_version }}" >> $GITHUB_OUTPUT
          echo "new_version=${{ github.event.client_payload.new_version }}" >> $GITHUB_OUTPUT
          echo "service_name=${{ github.event.client_payload.service_name }}" >> $GITHUB_OUTPUT
          echo "release_type=${{ github.event.client_payload.release_type }}" >> $GITHUB_OUTPUT
          echo "rc_name=${{ github.event.client_payload.rc_name }}" >> $GITHUB_OUTPUT
          echo "rc_manager=${{ github.event.client_payload.rc_manager }}" >> $GITHUB_OUTPUT
          echo "day1_date=${{ github.event.client_payload.day1_date }}" >> $GITHUB_OUTPUT
          echo "day2_date=${{ github.event.client_payload.day2_date }}" >> $GITHUB_OUTPUT
          echo "slack_channel=${{ github.event.client_payload.slack_channel }}" >> $GITHUB_OUTPUT
          echo "slack_user=${{ github.event.client_payload.slack_user }}" >> $GITHUB_OUTPUT
        else
          echo "source=manual" >> $GITHUB_OUTPUT
          echo "prod_version=${{ inputs.prod_version }}" >> $GITHUB_OUTPUT
          echo "new_version=${{ inputs.new_version }}" >> $GITHUB_OUTPUT
          echo "service_name=${{ inputs.service_name }}" >> $GITHUB_OUTPUT
          echo "release_type=${{ inputs.release_type }}" >> $GITHUB_OUTPUT
          echo "rc_name=${{ inputs.rc_name }}" >> $GITHUB_OUTPUT
          echo "rc_manager=${{ inputs.rc_manager }}" >> $GITHUB_OUTPUT
          echo "day1_date=${{ inputs.day1_date }}" >> $GITHUB_OUTPUT
          echo "day2_date=${{ inputs.day2_date }}" >> $GITHUB_OUTPUT
          echo "slack_channel=" >> $GITHUB_OUTPUT
          echo "slack_user=" >> $GITHUB_OUTPUT
        fi

    - name: 📋 Display release information
      run: |
        echo "🚀 RC Release Automation Started"
        echo "=================================="
        echo "Source: ${{ steps.params.outputs.source }}"
        echo "Service: ${{ steps.params.outputs.service_name }}"
        echo "Version: ${{ steps.params.outputs.prod_version }} → ${{ steps.params.outputs.new_version }}"
        echo "Type: ${{ steps.params.outputs.release_type }}"
        echo "RC: ${{ steps.params.outputs.rc_name }}"
        echo "Manager: ${{ steps.params.outputs.rc_manager }}"
        echo "Schedule: ${{ steps.params.outputs.day1_date }} (Day 1) → ${{ steps.params.outputs.day2_date }} (Day 2)"
        echo "=================================="

    - name: 🔍 Validate configuration
      run: |
        echo "🔧 Validating configuration..."
        python test_cli.py --test-config

    - name: 📝 Generate release documentation
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
        GITHUB_REPO: ${{ github.repository }}
      run: |
        echo "📝 Generating release documentation..."
        
        # Create output directory
        mkdir -p release_output
        
        # Run the main CLI with extracted parameters
        python main.py \
          --prod-version "${{ steps.params.outputs.prod_version }}" \
          --new-version "${{ steps.params.outputs.new_version }}" \
          --service-name "${{ steps.params.outputs.service_name }}" \
          --release-type "${{ steps.params.outputs.release_type }}" \
          --rc-name "${{ steps.params.outputs.rc_name }}" \
          --rc-manager "${{ steps.params.outputs.rc_manager }}" \
          --day1-date "${{ steps.params.outputs.day1_date }}" \
          --day2-date "${{ steps.params.outputs.day2_date }}" \
          --output-dir "release_output"

    - name: 📊 Validate generated files
      run: |
        echo "📊 Validating generated files..."
        
        # Check that files were generated
        ls -la release_output/
        
        # Validate file sizes
        if [ ! -f "release_output/release_notes.txt" ]; then
          echo "❌ Error: release_notes.txt not generated"
          exit 1
        fi
        
        if [ ! -f "release_output/crq_day1.txt" ]; then
          echo "❌ Error: crq_day1.txt not generated"
          exit 1
        fi
        
        if [ ! -f "release_output/crq_day2.txt" ]; then
          echo "❌ Error: crq_day2.txt not generated"
          exit 1
        fi
        
        # Check file sizes
        RELEASE_NOTES_SIZE=$(stat -c%s "release_output/release_notes.txt")
        CRQ_DAY1_SIZE=$(stat -c%s "release_output/crq_day1.txt")
        CRQ_DAY2_SIZE=$(stat -c%s "release_output/crq_day2.txt")
        
        echo "✅ Files generated successfully:"
        echo "  - release_notes.txt: $RELEASE_NOTES_SIZE bytes"
        echo "  - crq_day1.txt: $CRQ_DAY1_SIZE bytes"
        echo "  - crq_day2.txt: $CRQ_DAY2_SIZE bytes"
        
        # Validate minimum file sizes
        if [ "$RELEASE_NOTES_SIZE" -lt 1000 ]; then
          echo "⚠️ Warning: release_notes.txt seems too small ($RELEASE_NOTES_SIZE bytes)"
        fi

    - name: 📋 Create release summary
      run: |
        echo "📋 Creating release summary..."
        
        # Create a summary file
        cat > release_output/RELEASE_SUMMARY.md << EOF
        # 🚀 Release Summary
        
        **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Workflow:** ${{ github.workflow }} (#${{ github.run_number }})
        **Triggered by:** ${{ steps.params.outputs.source }}
        
        ## 📋 Release Information
        - **Service:** ${{ steps.params.outputs.service_name }}
        - **Version:** ${{ steps.params.outputs.prod_version }} → ${{ steps.params.outputs.new_version }}
        - **Type:** ${{ steps.params.outputs.release_type }}
        - **RC:** ${{ steps.params.outputs.rc_name }}
        - **Manager:** ${{ steps.params.outputs.rc_manager }}
        - **Schedule:** ${{ steps.params.outputs.day1_date }} (Day 1) → ${{ steps.params.outputs.day2_date }} (Day 2)
        
        ## 📁 Generated Files
        - \`release_notes.txt\` - Confluence-ready release notes
        - \`release_notes.md\` - Markdown version for GitHub
        - \`crq_day1.txt\` - Day 1 preparation CRQ
        - \`crq_day2.txt\` - Day 2 deployment CRQ
        
        ## 🔗 Next Steps
        1. Download the artifacts from this workflow run
        2. Copy \`release_notes.txt\` content into Confluence
        3. Use CRQ files for change management process
        4. Share release information with stakeholders
        
        **🎉 Release documentation generated successfully!**
        EOF

    - name: 🤖 Trigger Slack Sign-off Workflow
      if: env.SLACK_BOT_URL != '' || steps.params.outputs.source == 'slack'
      env:
        SLACK_BOT_URL: ${{ secrets.SLACK_BOT_URL }}
        SLACK_BOT_API_KEY: ${{ secrets.SLACK_BOT_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🤖 Triggering Slack sign-off workflow..."
        
        # Create PR data file from the generated release notes
        # In a real implementation, this would fetch actual PR data from GitHub API
        # For now, we'll create a sample based on the service
        cat > release_output/pr_data.json << EOF
        [
          {
            "number": 123,
            "html_url": "https://github.com/org/${{ steps.params.outputs.service_name }}/pull/123",
            "title": "Feature update for ${{ steps.params.outputs.new_version }}",
            "user": {"login": "developer1"},
            "labels": [{"name": "feature"}]
          },
          {
            "number": 124,
            "html_url": "https://github.com/org/${{ steps.params.outputs.service_name }}/pull/124",
            "title": "Bug fix for release",
            "user": {"login": "developer2"},
            "labels": [{"name": "bugfix"}]
          }
        ]
        EOF
        
        # Create release metadata file
        cat > release_output/release_metadata.json << EOF
        {
          "service": "${{ steps.params.outputs.service_name }}",
          "version": "${{ steps.params.outputs.new_version }}",
          "day1_date": "${{ steps.params.outputs.day1_date }}",
          "day2_date": "${{ steps.params.outputs.day2_date }}",
          "signoff_cutoff_time": "12:00 PM tomorrow",
          "rc_slack_handle": "${{ steps.params.outputs.rc_manager }}",
          "channel_id": "${{ steps.params.outputs.slack_channel }}",
          "trigger_user": "${{ steps.params.outputs.slack_user }}"
        }
        EOF
        
        # Try to trigger Slack bot integration
        if python -m slack_bot.integration release_output/pr_data.json release_output/release_metadata.json; then
          echo "✅ Slack sign-off workflow triggered successfully"
          echo "slack_integration=success" >> $GITHUB_OUTPUT
        else
          echo "⚠️ Slack integration failed, but continuing workflow"
          echo "slack_integration=failed" >> $GITHUB_OUTPUT
        fi

    - name: 📦 Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-documentation-${{ steps.params.outputs.service_name }}-${{ steps.params.outputs.new_version }}
        path: release_output/
        retention-days: 30

    - name: 📝 Add job summary
      run: |
        cat release_output/RELEASE_SUMMARY.md >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📥 Download Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "Click the 'Artifacts' section above to download the generated release documentation." >> $GITHUB_STEP_SUMMARY
        
        # Add Slack integration status if it was attempted
        if [ -n "${{ env.SLACK_BOT_URL }}" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🤖 Slack Integration" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.slack-integration.outputs.slack_integration }}" = "success" ]; then
            echo "✅ Slack sign-off workflow triggered successfully" >> $GITHUB_STEP_SUMMARY
            echo "Check your Slack workspace for the release thread." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Slack integration failed or not configured" >> $GITHUB_STEP_SUMMARY
            echo "Release documentation is still available for manual distribution." >> $GITHUB_STEP_SUMMARY
          fi
        fi

    - name: 📤 Post Results to Slack (Serverless)
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      run: |
        echo "📤 Posting results to Slack..."
        
        # Get file sizes for summary
        RELEASE_NOTES_SIZE=$(stat -c%s "release_output/release_notes.txt" 2>/dev/null || echo "0")
        CRQ_DAY1_SIZE=$(stat -c%s "release_output/crq_day1.txt" 2>/dev/null || echo "0")
        CRQ_DAY2_SIZE=$(stat -c%s "release_output/crq_day2.txt" 2>/dev/null || echo "0")
        
        # Only post if we have a Slack channel and token
        if [ -n "${{ steps.params.outputs.slack_channel }}" ] && [ -n "$SLACK_BOT_TOKEN" ]; then
          
          # Create sign-off tracking message
          cat > slack_message.json << 'EOF'
        {
          "channel": "${{ steps.params.outputs.slack_channel }}",
          "text": "🎉 Release documentation ready for ${{ steps.params.outputs.service_name }} ${{ steps.params.outputs.new_version }}!",
          "blocks": [
            {
              "type": "header",
              "text": {
                "type": "plain_text",
                "text": "🎉 Release ${{ steps.params.outputs.service_name }} ${{ steps.params.outputs.new_version }} Ready!"
              }
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*📋 Generated Documentation:*\n• Release Notes: RELEASE_SIZE_PLACEHOLDER bytes\n• Day 1 CRQ: CRQ1_SIZE_PLACEHOLDER bytes\n• Day 2 CRQ: CRQ2_SIZE_PLACEHOLDER bytes\n\n*📁 Download:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Artifacts>"
              }
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*🗓️ Schedule:*\n• Day 1 (prep): ${{ steps.params.outputs.day1_date }}\n• Day 2 (deploy): ${{ steps.params.outputs.day2_date }}\n• RC Manager: <@${{ steps.params.outputs.rc_manager }}>"
              }
            },
            {
              "type": "divider"
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "🔄 *PR Sign-off Tracking*\nDevelopers with PRs in this release, please confirm sign-off by reacting with ✅ to this message.\n\n*Cut-off: 12:00 PM tomorrow*"
              }
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*🚀 Next Steps:*\n1. Download release artifacts above\n2. Review generated documentation\n3. Confirm PR sign-offs with ✅ reactions\n4. Proceed with deployment on scheduled dates"
              }
            }
          ]
        }
        EOF
          
          # Replace placeholders with actual sizes
          sed -i "s/RELEASE_SIZE_PLACEHOLDER/$RELEASE_NOTES_SIZE/g" slack_message.json
          sed -i "s/CRQ1_SIZE_PLACEHOLDER/$CRQ_DAY1_SIZE/g" slack_message.json
          sed -i "s/CRQ2_SIZE_PLACEHOLDER/$CRQ_DAY2_SIZE/g" slack_message.json
          
          # Post to Slack
          RESPONSE=$(curl -s -X POST -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
               -H "Content-type: application/json" \
               --data @slack_message.json \
               https://slack.com/api/chat.postMessage)
          
          if echo "$RESPONSE" | grep -q '"ok":true'; then
            echo "✅ Posted to Slack channel: ${{ steps.params.outputs.slack_channel }}"
          else
            echo "❌ Failed to post to Slack: $RESPONSE"
          fi
        else
          echo "⚠️ Slack posting skipped - missing channel or token"
        fi

    - name: ✅ Workflow completion
      run: |
        echo "✅ RC Release Automation completed successfully!"
        echo "📊 Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo "📦 Artifacts ready for download"
        echo "⏱️ Total execution time: ${{ github.event.repository.updated_at }}"
        
        # Final status summary
        if [ -n "${{ env.SLACK_BOT_URL }}" ]; then
          if [ "${{ steps.slack-integration.outputs.slack_integration }}" = "success" ]; then
            echo "🤖 Slack sign-off workflow is active"
          else
            echo "📋 Manual distribution of release documents required"
          fi
        else
          echo "📋 Slack integration not configured - using manual process"
        fi 